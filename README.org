#+TITLE: Emacs Customisations
#+AUTHOR: Manpreet Babbra
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+HTML_HEAD: <style> #content{max-width:1000px;}</style>

This document details my customisations to Emacs for my workflow. It was inspired by [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][Howard's Literate Programming essays]] as well as [[https://www.youtube.com/watch?v=EX9PKK3EMaw][Mike Zamansky's Org Init video]].

* Initialisation

Firstly we imported =package= and setup our package repositories, in this case /Melpa Stable/.

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 
  'package-archives
  '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(package-initialize)
#+END_SRC

We use =package= to solely install =use-package= which is used for the rest of our configuration. =use-package= is a way of installing and setting up a package in an easy to reason way as the code is self-contained. 

#+BEGIN_SRC emacs-lisp
(when (not package-archive-contents)
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

* Packages

** Try 

[[https://github.com/larstvei/Try][=try=]] allows us to temporarily install packages (they're removed on next restart of =Emacs=).

#+BEGIN_SRC emacs-lisp
(use-package try :ensure t)
#+END_SRC

** All The Icons

[[https://github.com/domtronn/all-the-icons.el][All The Icons]] updates the icons used in Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons :ensure t)
#+END_SRC

** Doom Themes

Pretty much the ultimate theme for Emacs. [[https://github.com/hlissner/doom-emacs][Doom]] is beautiful. In the =init= and =config= we do a lot of user interface setup such as turning off the toolbars etc, a lot of things that aren't really related to =Doom= but it seems to fit.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  
  :init
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
  (setq-default frame-title-format "%b (%f)")
  (set-face-attribute 'default nil :height 120 :family "Fira Code")
  ;; only works on mac!
  ;; turns on ligatures
  (mac-auto-operator-composition-mode)
  (menu-bar-mode -1) ;; remove menu bar
  (tool-bar-mode -1) ;; remove toolbar
  (global-linum-mode)
  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; Newline at end of file
  (setq require-final-newline t)
  ;; Wrap lines at 80 characters
  (setq-default fill-column 80)
  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
  (setq-default tab-width 8)            ;; but maintain correct appearance)
  
  :config
  (require 'doom-themes)
  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-dracula t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;(doom-themes-neotree-config)
  ;; or for treemacs users
  (doom-themes-treemacs-config)
  (when (fboundp 'scroll-bar-mode) ;; don't show emacs scroll bars when graphical
    (scroll-bar-mode -1))
  ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config)
  )
#+END_SRC

** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][Doom Modeline]] themes the =Emacs= modeline.

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config (setq doom-modeline-minor-modes t))
#+END_SRC

** Minions

[[https://github.com/tarsius/minions][Minions]] condenses the major mode and minor modes of Emacs.

#+BEGIN_SRC emacs-lisp
(use-package minions :ensure t :config (minions-mode 1))
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] keeps things local to a project so you don't have to open files from the default location, it'll go to the project root.

#+BEGIN_SRC emacs-lisp
(use-package projectile 
  :ensure t
  :config
  (projectile-mode 1))
#+END_SRC

** Which Key

This package really helps finding the keybinding of a command that you've partially forgotten. Input the beginning of a command and wait, [[https://github.com/justbur/emacs-which-key][which-key]] shows all available bindings.

#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t :config (which-key-mode 1))
#+END_SRC

** Yasnippet

[[https://github.com/joaotavora/yasnippet][Yasnippet]] allows you to add snippets for commonly used things and add them to your document with a command. It's great for things that have a lot of boilerplate.

#+BEGIN_SRC emacs-lisp
(use-package yasnippet :ensure t :config (yas-global-mode 1))
#+END_SRC

** Rainbow Delimiters

Color code things like brackets. [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]] and [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow mode]] are especially useful for lisps! Below we set it up for emacs-lisp, program modes.

*TODO* Check it works for Clojure.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t)

(use-package rainbow-mode
  :ensure t
  :hook
  ((prog-mode emacs-lisp-mode ielm-mode lisp-mode lisp-interaction-mode scheme-mode) . #'rainbow-mode))
#+END_SRC

** Paredit

[[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Paredit]] gives you structural editing for your code. It's great for Lisps!

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :hook ((emacs-lisp-mode ielm-mode lisp-mode lisp-interaction-mode scheme-mode) . #'paredit-mode))
#+END_SRC

** Eldoc

[[https://www.emacswiki.org/emacs/ElDoc][Eldoc]] provides documentation for code functions.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure t
  :config
  (global-eldoc-mode 1))
#+END_SRC

** Tagedit

[[https://github.com/magnars/tagedit][Tagedit]] gives paredit like functionality but for html-mode.

#+BEGIN_SRC emacs-lisp
(use-package tagedit :ensure t)
#+END_SRC

** Multiple Cursors

[[https://github.com/magnars/multiple-cursors.el][Multiple Cursors]] allow you to use multiple cursors. It's very handy for making changes to lots of lines of similar text.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors :ensure t)
#+END_SRC

** Clojure Mode

[[https://github.com/clojure-emacs/clojure-mode][Clojure Mode]] provides language support for the Clojure programming language.

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config
  (add-hook 'clojure-mode-hook #'eldoc-mode)
  (add-hook 'clojure-mode-hook #'paredit-mode)
  (add-hook 'clojure-mode-hook #'subword-mode)
  (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Cider

[[https://github.com/clojure-emacs/cider][Cider]] gives REPL functionality, and a whole lot more, to Clojure.

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :config
  (setq nrepl-log-messages t)
  ;; go right to the REPL buffer when it's finished connecting
  (setq cider-repl-pop-to-buffer-on-connect t)
  ;; When there's a cider error, show its buffer and switch to it
  (setq cider-show-error-buffer t)
  (setq cider-auto-select-error-buffer t)
  ;; Where to store the cider history.
  (setq cider-repl-history-file "~/.emacs.d/cider-history")

  ;; Wrap when navigating history.
  (setq cider-repl-wrap-history t)
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'cider-repl-mode-hook #'eldoc-mode)
  (add-hook 'cider-repl-mode-hook #'paredit-mode)
  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Clojure Yasnippets
[[https://github.com/mpenet/clojure-snippets]]

You can just type something like =ns= and =TAB= and it'll populate it automatically.

#+BEGIN_SRC emacs-lisp
(use-package clojure-snippets
  :ensure t)
#+END_SRC
** YAML Mode

[[https://github.com/yoshiki/yaml-mode][YAML Mode]] provides YAML support.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC

** Flyspell

[[https://www.emacswiki.org/emacs/FlySpell][Flyspell]] provides spell check support inside Emacs. Here we rely on Aspell being installed.

*TODO* Change to UK English.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :config
  (when (eq system-type 'windows-nt)
    (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))
  (setq ispell-program-name "aspell" ; use aspell instead of ispell
        ispell-extra-args '("--sug-mode=ultra"))
  (add-hook 'text-mode-hook #'flyspell-mode)
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))
#+END_SRC

** Flycheck

[[https://www.flycheck.org/en/latest/][Flycheck]] provides syntax checking for many languages.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC

** Ace Window

[[https://github.com/abo-abo/ace-window][Ace Window]] makes it easier to switch buffers, especially when you have more than 2. Here we remap the other-window key binding to use Ace Window.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (global-set-key [remap other-window] 'ace-window))
#+END_SRC

** Avy

[[https://github.com/abo-abo/avy][Avy]] provides a nice way of jumping around a document (visible area only) based on some selection of letters. We bind Hyper-F (Command - F) to do a timer based search (it looks for matching text when the timer runs out.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("H-f" . avy-goto-char-timer)
  :config
  (setq avy-background t))
#+END_SRC

** Smex

[[https://github.com/nonsequitur/smex][Smex]] (Smart Meta-x) is an enhancement for =Meta-x= and does a number of things. The main thing I like about it is that it orders items by the most used.

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :config (smex-initialize))
#+END_SRC

** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] is a completion tool, similar to [[https://github.com/nonsequitur/smex][Smex]] which I used to use.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))
#+END_SRC

** Swiper

[[https://github.com/abo-abo/swiper#swiper][Swiper]] is an alternative to isearch that uses ivy to show an overview of all matches.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :config
  (global-set-key "\C-s" 'swiper))
#+END_SRC

** Counsel

[[https://oremacs.com/2015/04/09/counsel-completion/][Counsel]] is in the same codebase as Ivy and Swiper. We use it to override the default =M-x= binding.

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c a") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history))
#+END_SRC

** Company

[[https://company-mode.github.io/][Company Mode]] provides auto completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (progn
    (add-hook 'after-init-hook 'global-company-mode)))
#+END_SRC

** Magit

[[https://magit.vc/][Magit]] provides super-charged git support.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+END_SRC

* Keyboard Changes

Here we describe our keyboard changes. We add a lot of =Hyper= (Command) combos to give us access to common keybindings for cut, copy, paste, save etc.

#+BEGIN_SRC emacs-lisp
;; Keybonds
(global-set-key [(hyper a)] 'mark-whole-buffer)
(global-set-key [(hyper v)] 'yank)
(global-set-key [(hyper c)] 'kill-ring-save)
(global-set-key [(hyper s)] 'save-buffer)
(global-set-key [(hyper l)] 'goto-line)
(global-set-key [(hyper w)]
                (lambda () (interactive) (delete-window)))
(global-set-key [(hyper z)] 'undo)
(global-set-key [(hyper f)] 'avy-goto-char-timer)
#+END_SRC

By default the =Meta= key is bound to Command which is annoying for me. I far prefer it to be alt/option. So we change that with the below and make a subtle rebinding to still allow us to insert hash with the normal Mac binding (Option 3).

#+BEGIN_SRC emacs-lisp
;; macports - switch meta key
(defun mac-switch-meta nil
  "Switch meta back to options."
  (interactive)
  (setq mac-command-modifier 'hyper
	mac-option-modifier 'meta
        )
  (global-set-key (kbd "M-3") (lambda () (interactive) (insert "#"))))

(mac-switch-meta)
#+END_SRC
